1.	Hibernate is a ORM(Object Relation Mapping) tool which is used for persistent data(to interact(crud operation) with your database).

2.	we have 3 files for complete hibernate:-
	1-Your main class(ex. app.java) where you do your all operations:-
		a-Session is a interface provided by hibernate and to create object of it we need to implement via SessionFactory.
		b-SessionFactory is also a interface and so we need to use Configuration class to create object of it and all these are under hibernate package.
			ex- Configuration cfg=new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Users.class);// addAnnotatedClass to add your entity class.
				SessionFactory factory=cfg.buildSessionFactory();//creating Sessionfactory object
				Session session=factory.openSession();  //Creating Sesion object to connect to database
		c- and further operations.
	
	2-Your entity class where we define variables,constructor,getter and setter, toString() etc.
	3-Your Hibernate.cfg.xml file to configure your database with current session.
	
3.	we use JPA(Java persistence API)package to use annotation which allow class to store its object into database using @Entity;
	->we have 3 players here:-
		a:-class name-> by default table name =class name.
		b:-entity name->tablename=entity name if you specified any.ex(@Entity(name="user")).it changes entity as well as table name.
		c:-table name->tablename=name if you specified any. ex(@Table(name="user")).it changes only table name.

4.	you can use @Column(name="column_name") annotation to define column name in table specifically.

5.	@Transient keyword can be used if you dont want to store that particular column in table.

6.	@Embeddable is used when you want to use class variable inside another class without confusion. which prevents compiler to check for another entity class.

7.	You can use Annotations to defines relations between two entity classes.
	a:-@OneToMany
	b:-@ManyToOne
	c:-@OneToOne
	d:-@ManyToMany
	You can use mappedBy to define which class will create mapping ex. @OneToMany(mappedBy="classObjectName");
	
8.	If you have any of these relationship and you want to fetch values of another class then there are 2 concept:-
	a-> LAZY- by default FetchType=Lazy in which you will get only current table data not of another table which is joined by relationship.
	b-> EAGER- by default FetchType=EAGER in which you get all data which are joined by realtionship.
	
9.	Apart from ORM Model Hibernate gives you caching technique so that you dont need to use database again and again.
	->First Level Cache which is provided by hibernate and it store data which is recently used during query for a particular session.
	  for different session we have different second level cache.if a query is fired once is stored for that session only for different session it is not
	  available.It works automatically without writing anything else in the code. if you fetch 2 times it will fire query only once.
	->Second Level Cache, in this you can share cache among different session but it is not provided by hibernate you have to configure it.ex(ehcache).
	  By default second level cache is for session.get() method only so if you want to use it with queries you need to configure that with properties.

10.	HQL(Hibernate Query Language) is used when you are working with some complex sql queries than simple save,update and get query provided in hibernate.

11.	HQL works similar to sql but bit difference like in sql(Select rollno from student;// here rollno=column name and student=table name) but in
	HQL(select rollno from Student; // here rollno=porperty or variable name and student=class name).
	
12.	In sql we use ResultSet to fetch records but in HQL we use List and enhanced for loop  get records 
	ex. List<Type> ObjectName=session.createQuery("your query").list();

13.	We can use SQL quries inside Hibernate ex.  List<Users> users=session.createSQLQuery("select * from users").addEntity(Users.class).list();
	instead of createQuery we use createSQLQuery and .addEntity(className) to convert object into class type.
	
14.	Hibernate Object state or Persistence Life Cycle define that it have 4 phase:-
	1->transient:- when you create a object and set some values into it, it is not reflected to your database and you will loose value if you close application.
	2->persistent:-when you fire save,get query or any query your object is synced with database whatever you change in java file it reflects into your database.
	3->detached:-you commited or detach() your session so that no more changes made in object reflects to your database.
	4->removed:- when you deleted object from database using remove() or some queries, it will removed from database but there in java.
	
15.	get and load does same work but the diff. is that get will give you object whether you are printing it or not but load will not return you object
	if you are not printing it, it will give you a proxy object.
	moreoever if id is not present in table get will give a null value but load will throw exception  no row found.
	
16.	JPA is a specification you need to use hibernate or any other tool to implement it  and implementing JPA ensures that if in future you want to switch to
	another tool its easy as you have implemented JPA in hibernate.
	