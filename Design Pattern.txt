1.	-A design pattern is a well-described solution to a common software problem.
	-Design Patterns are already defined and provides industry standard approach to 
	 solve a recurring problem, so it saves time if we sensibly use the design pattern.
	-Using design patterns promotes reusability that leads to more robust and highly maintainable code.

2.	Three type of Design pattern:-
	
	1.Creational -	Creational design patterns provide solution to instantiate a object in the best possible way 
					for specific situations.
		
		1. Singleton - Singleton pattern restricts the instantiation of a class and ensures that only one instance of the 
					   class exists in the Java virtual machine.
					
		2. Factory - Factory design pattern is used when we have a super class with multiple sub-classes and based on input, 
					 we need to return one of the sub-class.
		
		3. Abstract Factory - In Abstract Factory pattern, we get rid of if-else block and have a factory class for each 
							  sub-class and then an Abstract Factory class that will return the sub-class based on the input 
							  factory class.
		
		4. Builder -  Builder pattern solves the issue with large number of optional parameters and inconsistent state by 
					  providing a way to build the object step-by-step and provide a method that will actually return the 
					  final Object.
		
	
	2.Structural - Structural patterns provide different ways to create a class structure.
	
		1. Adapter - The adapter design pattern is one of the structural design patterns and 
					 it is used so that two unrelated interfaces can work together.
					 
		2. Proxy - proxy design pattern is used when we want to provide controlled access of a functionality.
		
		3. Decorator - used to modify the functionality of an object at runtime.
		
	3.Behavioral - provide solution for the better interaction between objects and 
				   how to provide lose coupling and flexibility to extend easily.
				   
		1. Template Method - used to create a method stub and deferring some of the steps of implementation to the subclasses
		
		2. Mediator - The mediator design pattern is used to provide a centralized communication medium between 
					  different objects in a system.
		
		3. Observer - Observer design pattern is useful when you are interested in the state of an object and 
					  want to get notified whenever there is any change.
					  
		4. Strategy - Strategy pattern is used when we have multiple algorithm for a specific task and 
					  client decides the actual implementation to be used at runtime.
					  
3.	DAO Design Pattern - used to separate the data persistence logic in a separate layer. This way, 
						 the service remains completely in dark about how the low-level operations to access the database is 
						 done. This is known as the principle of Separation of Logic.
						
4. Inheritance vs Composition:
	- Inheritance: when a child class inherits from a parent class, the child acquires all behaviors from the parent. Inheritance will make a class hierarchy.
		-eg:
			interface Animal { 
			   func poop() { }
			}
			class Dog: Animal {
			   func bark() { }
			}
			class Cat: Animal { 
			   func meow() { }
			}
			let animals: [Animal] = [Dog(), Cat()]

		- Here Animal is parent, dog and cat inherit from it poop() method and they have bark() and meow() method respectively.

	- drawback: 
		- It makes code tightly coupled.
		- In future if there are 10 of such child class and we want to change some functionality in 5-6 class then either we need to make changes in parent class and keep some error handly case for those who are not using it or implement in each class.

	- Composition: it enables the creation of complex types by combining objects (components) of other types, rather than inheriting from a base or parent class.
		-eg:
			class Poopale {
			   func poop()
			}
			class Barkable { 
			   func bark() 
			}
			class Meowable {
			   func meow()
			}
			class Dog: Poopable, Barkable {
			   var barker: Barkable
			   var pooper: Poopable 
			   func bark() { barker.bark() }
			   func poop() { pooper.poop() }
			}
			...
			typealias Animal = Poopable & ... // and any behaviors
			let animales: [Animal] = [Dog(), Cat()]

		- here poop(), bark(), meow() all are individual class/behaviour and any class can use it as they want independently.

		- pros over inheritance:
			- It makes code loosely coupled
			- whether there are 10 or 100 class are there they can use these class independetly and we an add/modify behaviour anytime without affecting any class.
			
