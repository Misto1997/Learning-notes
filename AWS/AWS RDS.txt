1.	• RDS stands for Relational Database Service
	• It’s a managed DB service for DB use SQL as a query language.
	• It allows you to create databases in the cloud that are managed by AWS
		• Postgres
		• MySQL
		• MariaDB
		• Oracle
		• Microsoft SQL Server
		• Aurora (AWS Proprietary database)

2.	Advantage over using RDS versus deploying DB on EC2
	• RDS is a managed service:
		• Automated provisioning, OS patching
		• Continuous backups and restore to specific timestamp (Point in Time Restore)!
		• Monitoring dashboards
		• Read replicas for improved read performance
		• Multi AZ setup for DR (Disaster Recovery)
		• Maintenance windows for upgrades
		• Scaling capability (vertical and horizontal)
		• Storage backed by EBS (gp2 or io1)
	• BUT you can’t SSH into your instances
	
3.	RDS Backups
	• Backups are automatically enabled in RDS
	• Automated backups:
		• Daily full backup of the database (during the maintenance window)
		• Transaction logs are backed-up by RDS every 5 minutes
		• => ability to restore to any point in time (from oldest backup to 5 minutes ago)
		• 7 days retention (can be increased to 35 days)
	• DB Snapshots:
		• Manually triggered by the user
		• Retention of backup for as long as you want
		
4.	RDS Read Replicas for read scalability
	• Up to 5 Read Replicas
	• can be within AZ, Cross AZ or Cross Region
	• Replication is ASYNC, so reads are eventually consistent(your replica may gives you old data when you read)
	• Replicas can be promoted to their own DB(in simple it will became a live DB instead of replica of main DB)
	• Applications must update the connection string to leverage read replicas
	
5.	RDS Read Replicas – Use Cases
	• You have a production database that is taking on normal load
	• You want to run a reporting application to run some analytics
	• You create a Read Replica to run the new workload there
	• The production application is unaffected
	• Read replicas are used for SELECT (=read) only kind of statements (not INSERT, UPDATE, DELETE)
	
6.	RDS Read Replicas – Network Cost
		• In AWS there’s a network cost when data goes from one AZ to another
		• To reduce the cost, you can have your Read Replicas in the same AZ
		
7.	RDS Multi AZ (Disaster Recovery)
		• SYNC replication
		• One DNS name – automatic app failover to standby(if you loose your main instance DB it will automatically redirect your requests to standby DB)
		• Increase availability
		• Failover in case of loss of AZ, loss of network, instance or storage failure
		• No manual intervention in apps
		• Not used for scaling
		• Note:The Read Replicas be setup as Multi AZ for Disaster Recovery (DR)
		
8.	RDS Security - Encryption
	• At rest encryption
		• Possibility to encrypt the master & read replicas with AWS KMS - AES-256 encryption
		• Encryption has to be defined at launch time
		• If the master is not encrypted, the read replicas cannot be encrypted
		• Transparent Data Encryption (TDE) available for Oracle and SQL Server
	• In-flight encryption
		• SSL certificates to encrypt data to RDS in flight
		• Provide SSL options with trust certificate when connecting to database
		• To enforce SSL:
			• PostgreSQL: rds.force_ssl=1 in the AWS RDS Console (Parameter Groups)
			• MySQL: Within the DB: GRANT USAGE ON *.* TO 'mysqluser'@'%' REQUIRE SSL;
			
9.	RDS Encryption Operations
		• Encrypting RDS backups
			• Snapshots of un-encrypted RDS databases are un-encrypted
			• Snapshots of encrypted RDS databases are encrypted
			• Can copy a snapshot into an encrypted one
		• To encrypt an un-encrypted RDS database:
			• Create a snapshot of the un-encrypted database
			• Copy the snapshot and enable encryption for the snapshot
			• Restore the database from the encrypted snapshot
			• Migrate applications to the new database, and delete the old database
			
10.	RDS Security – Network & IAM
	• Network Security
		• RDS databases are usually deployed within a private subnet, not in a public one
		• RDS security works by leveraging security groups (the same concept as for EC2
		instances) – it controls which IP / security group can communicate with RDS
	• Access Management
		• IAM policies help control who can manage AWS RDS (through the RDS API)
		• Traditional Username and Password can be used to login into the database
		• IAM-based authentication can be used to login into RDS MySQL & PostgreSQL
		
11.	RDS - IAM Authentication
	• IAM database authentication works with MySQL and PostgreSQL
	• You don’t need a password, just an authentication token obtained through IAM & RDS API calls
	• Auth token has a lifetime of 15 minutes
	• Benefits:
		• Network in/out must be encrypted using SSL
		• IAM to centrally manage users instead of DB
		• Can leverage IAM Roles and EC2 Instance profiles for easy integration
		
12.	RDS Security – Summary
	• Encryption at rest:
		• Is done only when you first create the DB instance
		• or: unencrypted DB => snapshot => copy snapshot as encrypted => create DB from snapshot
	• Your responsibility:
		• Check the ports / IP / security group inbound rules in DB’s SG
		• In-database user creation and permissions or manage through IAM
		• Creating a database with or without public access
		• Ensure parameter groups or DB is configured to only allow SSL connections
	• AWS responsibility:
		• No SSH access
		• No manual DB patching
		• No manual OS patching
		• No way to audit the underlying instance
		
--> Aurora

13.	Amazon Aurora
	• Aurora is a proprietary technology from AWS (not open sourced)
	• Postgres and MySQL are both supported as Aurora DB (that means your drivers will work as if Aurora was a Postgres or MySQL database)
	• Aurora is “AWS cloud optimized” and claims 5x performance improvement over MySQL on RDS, over 3x the performance of Postgres on RDS
	• Aurora storage automatically grows in increments of 10GB, up to 64 TB.
	• Aurora can have 15 replicas while MySQL has 5, and the replication process is faster (sub 10 ms replica lag)
	• Failover in Aurora is instantaneous. It’s HA (High Availability) native.
	• Aurora costs more than RDS (20% more) – but is more efficient
	
14.	Aurora High Availability and Read Scaling
		• 6 copies of your data across 3 AZ will be created automatically:
			• 4 copies out of 6 needed for writes
			• 3 copies out of 6 need for reads
			• Self healing with peer-to-peer replication
			• Storage is striped across 100s of volumes
		• One Aurora Instance takes writes (master) works with writer endpoint and multiple autoscaled read instances works with reader endpoint which is loadbalanced.
		• Automated failover for master in less than 30 seconds
		• Master + up to 15 Aurora Read Replicas serve reads
		• Support for Cross Region Replication
		
15.	Features of Aurora
		• Automatic fail-over
		• Backup and Recovery
		• Isolation and security
		• Industry compliance
		• Push-button scaling
		• Automated Patching with Zero Downtime
		• Advanced Monitoring
		• Routine Maintenance
		• Backtrack: restore data at any point of time without using backups
		
16.	Aurora Security
		• Similar to RDS because uses the same engines
		• Encryption at rest using KMS
		• Automated backups, snapshots and replicas are also encrypted
		• Encryption in flight using SSL (same process as MySQL or Postgres)
		• Possibility to authenticate using IAM token (same method as RDS)
		• You are responsible for protecting the instance with security groups
		• You can’t SSH
		
17.	Aurora Serverless
	• Automated database instantiation and autoscaling based on actual usage
	• Good for infrequent, intermittent or unpredictable workloads
	• No capacity planning needed
	• Pay per second, can be more cost-effective
	
18.	Global Aurora
	• Aurora Cross Region Read Replicas:
		• Useful for disaster recovery
		• Simple to put in place
	• Aurora Global Database (recommended):
		• 1 Primary Region (read / write)
		• Up to 5 secondary (read-only) regions, replication lag is less than 1 second
		• Up to 16 Read Replicas per secondary region
		• Helps for decreasing latency
		• Promoting another region (for disaster recovery) has an RTO of < 1 minute
		
19.	