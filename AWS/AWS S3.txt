1.	• Amazon S3 is one of the main building blocks of AWS
	• It’s advertised as ”infinitely scaling” storage
	• It’s widely popular and deserves its own section
	• Many websites use Amazon S3 as a backbone
	• Many AWS services uses Amazon S3 as an integration as well
	
2.	Bucket:
	• Amazon S3 allows people to store objects (files) in “buckets” (directories)
	• Buckets must have a globally unique name
	• Buckets are defined at the region level
	• Naming convention
		• No uppercase
		• No underscore
		• 3-63 characters long
		• Not an IP
		• Must start with lowercase letter or number
		
3.	Object:
	• Objects (files) have a Key
	• The key is the FULL path:
		• s3://my-bucket/my_file.txt
		• s3://my-bucket/my_folder1/another_folder/my_file.txt
	• The key is composed of prefix + object name
		• s3://my-bucket/my_folder1/another_folder/my_file.txt
	• There’s no concept of “directories” within buckets (although the UI will trick you to think otherwise)
	• Just keys with very long names that contain slashes (“/”)
	• Object values are the content of the body:
		• Max Object Size is 5TB (5000GB)
		• If uploading more than 5GB, must use “multi-part upload”
	• Metadata (list of text key / value pairs – system or user metadata)
	• Tags (Unicode key / value pair – up to 10) – useful for security / lifecycle
	• Version ID (if versioning is enabled)
	
4.	Amazon S3 - Versioning
	• You can version your files in Amazon S3
	• It is enabled at the bucket level
	• Same key overwrite will increment the “version”: 1, 2, 3….
	• It is best practice to version your buckets
		• Protect against unintended deletes (ability to restore a version)
		• Easy roll back to previous version
	• Notes:
		• Any file that is not versioned prior to enabling versioning will have version “null”
		• Suspending versioning does not delete the previous versions
		
5.	S3 Encryption for Objects
	• There are 4 methods of encrypting objects in S3
		• SSE-S3: encrypts S3 objects using keys handled & managed by AWS
		• SSE-KMS: leverage AWS Key Management Service to manage encryption keys
		• SSE-C: when you want to manage your own encryption keys
		• Client Side Encryption
	• It’s important to understand which ones are adapted to which situation for the exam
	
6.	SSE(Server Side Encryption)-S3
	• SSE-S3: encryption using keys handled & managed by Amazon S3
	• Object is encrypted server side
	• AES-256 encryption type
	• Must set header: “x-amz-server-side-encryption": "AES256"
	
7.	SSE-KMS
	• SSE-KMS: encryption using keys handled & managed by KMS
	• KMS Advantages: user control + audit trail
	• Object is encrypted server side
	• Must set header: “x-amz-server-side-encryption": ”aws:kms"
	
8.	SSE-C
	• SSE-C: server-side encryption using data keys fully managed by the customer outside of AWS
	• Amazon S3 does not store the encryption key you provide
	• HTTPS must be used
	• Encryption key must provided in HTTP headers, for every HTTP request made
	
9.	Client Side Encryption
	• Client library such as the Amazon S3 Encryption Client
	• Clients must encrypt data themselves before sending to S3
	• Clients must decrypt data themselves when retrieving from S3
	• Customer fully manages the keys and encryption cycle
	
10.	Encryption in transit (SSL/TLS)
	• Amazon S3 exposes:
		• HTTP endpoint: non encrypted
		• HTTPS endpoint: encryption in flight
	• You’re free to use the endpoint you want, but HTTPS is recommended
	• Most clients would use the HTTPS endpoint by default
	• HTTPS is mandatory for SSE-C
	• Encryption in flight is also called SSL / TLS
	
11.	S3 Security
	• User based
		• IAM policies - which API calls should be allowed for a specific user from IAM console
	• Resource Based
		• Bucket Policies - bucket wide rules from the S3 console - allows cross account
		• Object Access Control List (ACL) – finer grain
		• Bucket Access Control List (ACL) – less common
	• Note: an IAM principal can access an S3 object if
		• the user IAM permissions allow it OR the resource policy ALLOWS it
		• AND there’s no explicit DENY
		
12.	S3 Bucket Policies
	• JSON based policies
		• Resources: buckets and objects
		• Actions: Set of API to Allow or Deny
		• Effect: Allow / Deny
		• Principal: The account or user to apply the policy to
	• Use S3 bucket for policy to:
		• Grant public access to the bucket
		• Force objects to be encrypted at upload
		• Grant access to another account (Cross Account)
		
13.	Bucket settings for Block Public Access
	• Block public access to buckets and objects granted through
		• new access control lists (ACLs)
		• any access control lists (ACLs)
		• new public bucket or access point policies
	• Block public and cross-account access to buckets and objects through any public bucket or access point policies
	• These settings were created to prevent company data leaks
	• If you know your bucket should never be public, leave these on
	• Can be set at the account level
	
14.	S3 Security - Other
	• Networking:
		• Supports VPC Endpoints (for instances in VPC without www internet)
	• Logging and Audit:
		• S3 Access Logs can be stored in other S3 bucket
		• API calls can be logged in AWS CloudTrail
	• User Security:
		• MFA Delete: MFA (multi factor authentication) can be required in versioned buckets to delete objects
		• Pre-Signed URLs: URLs that are valid only for a limited time (ex: premium video service for logged in users)
	
15.	S3 Websites
	• S3 can host static websites and have them accessible on the www
	• The website URL will be:
		• <bucket-name>.s3-website-<AWS-region>.amazonaws.com
		OR
		• <bucket-name>.s3-website.<AWS-region>.amazonaws.com
	• If you get a 403 (Forbidden) error, make sure the bucket policy allows
	public reads!
	
14.	CORS - Explained
	• An origin is a scheme (protocol), host (domain) and port
		• E.g.: https://www.example.com (implied port is 443 for HTTPS, 80 for HTTP)
	• CORS means Cross-Origin Resource Sharing
	• Web Browser based mechanism to allow requests to other origins while visiting the main origin
	• Same origin: http://example.com/app1 & http://example.com/app2
	• Different origins: http://www.example.com & http://other.example.com
	• The requests won’t be fulfilled unless the other origin allows for the requests, using CORS Headers (ex: Access-Control-Allow-Origin)
	
15.	S3 CORS
	• If a client does a cross-origin request on our S3 bucket, we need to enable the correct CORS headers
	• It’s a popular exam question
	• You can allow for a specific origin or for * (all origins)
	
16.	Amazon S3 - Consistency Model
	• Read after write consistency for PUTS of new objects
		• As soon as a new object is written, we can retrieve it
			ex: (PUT 200 => GET 200)
		• This is true, except if we did a GET before to see if the object existed
			ex: (GET 404 => PUT 200 => GET 404) – eventually consistent
	• Eventual Consistency for DELETES and PUTS of existing objects
		• If we read an object after updating, we might get the older version
			ex: (PUT 200 => PUT 200 => GET 200 (might be older version))
		• If we delete an object, we might still be able to retrieve it for a short time
			ex: (DELETE 200 => GET 200)
	• Note: there’s no way to request “strong consistency”
	
17.	S3 MFA-Delete
	• MFA (multi factor authentication) forces user to generate a code on a device (usually a mobile phone or hardware) before doing important operations on S3
	• To use MFA-Delete, enable Versioning on the S3 bucket
	• You will need MFA to
		• permanently delete an object version
		• suspend versioning on the bucket
	• You won’t need MFA for
		• enabling versioning
		• listing deleted versions
	• Only the bucket owner (root account) can enable/disable MFA-Delete
	• MFA-Delete currently can only be enabled using the CLI
	
18.	S3 Access Logs
	• For audit purpose, you may want to log all access to S3 buckets
	• Any request made to S3, from any account, authorized or denied, will be logged into another S3 bucket
	• That data can be analyzed using data analysis tools…
	• Or Amazon Athena as we’ll see later in this section!
	• The log format is at:https://docs.aws.amazon.com/AmazonS3/latest/dev/LogFormat.html
	• Do not set your logging bucket to be the monitored bucket(the bucket that you want to log)
	• It will create a logging loop, and your bucket will grow in size exponentially
		example: you put something in bucket, it gets logged there and once log gets there it will log again and this keeps on going.
	
19.	S3 Replication (CRR & SRR)
	• Must enable versioning in source and destination
	• Cross Region Replication (CRR)
	• Same Region Replication (SRR)
	• Buckets can be in different accounts
	• Copying is asynchronous
	• Must give proper IAM permissions to S3
	• CRR - Use cases: compliance, lower latency access, replication across accounts
	• SRR – Use cases: log aggregation, live replication between production and test accounts
	• After activating, only new objects are replicated (not retroactive)
	• For DELETE operations:
		• If you delete without a version ID, it adds a delete marker, not replicated
		• If you delete with a version ID, it deletes in the source, not replicated
	• There is no “chaining” of replication
		• If bucket 1 has replication into bucket 2, which has replication into bucket 3
		• Then objects created in bucket 1 are not replicated to bucket 3
	
20.	S3 Pre-Signed URLs
	• Can generate pre-signed URLs using SDK or CLI
		• For downloads (easy, can use the CLI)
		• For uploads (harder, must use the SDK)
	• Valid for a default of 3600 seconds, can change timeout with --expires-in [TIME_BY_SECONDS] argument
	• Users given a pre-signed URL inherit the permissions of the person who generated the URL for GET / PUT
	• Examples :
		• Allow only logged-in users to download a premium video on your S3 bucket
		• Allow an ever changing list of users to download files by generating URLs dynamically
		• Allow temporarily a user to upload a file to a precise location in our bucket
		
21.	S3 Storage Classes
	• Amazon S3 Standard - General Purpose
		• High durability (99.999999999%) of objects across multiple AZ
		• If you store 10,000,000 objects with Amazon S3, you can on average expect to incur a loss of a single object once every 10,000 years
		• 99.99% Availability over a given year
		• Sustain 2 concurrent facility failures
		• Use Cases: Big Data analytics, mobile & gaming applications, content distribution…
		
	• Amazon S3 Standard-Infrequent Access (IA)
		• Suitable for data that is less frequently accessed, but requires rapid access when needed
		• High durability (99.999999999%) of objects across multiple AZs
		• 99.9% Availability
		• Low cost compared to Amazon S3 Standard
		• Sustain 2 concurrent facility failures
		• Use Cases: As a data store for disaster recovery, backups…
		
	• Amazon S3 One Zone-Infrequent Access
		• Same as IA but data is stored in a single AZ
		• High durability (99.999999999%) of objects in a single AZ; data lost when AZ is destroyed
		• 99.5% Availability
		• Low latency and high throughput performance
		• Supports SSL for data at transit and encryption at rest
		• Low cost compared to IA (by 20%)
		• Use Cases: Storing secondary backup copies of on-premise data, or storing data you can recreate
		
	• Amazon S3 Intelligent Tiering
		• Same low latency and high throughput performance of S3 Standard
		• Small monthly monitoring and auto-tiering fee
		• Automatically moves objects between two access tiers based on changing access patterns
		• Designed for durability of 99.999999999% of objects across multiple Availability Zones
		• Resilient against events that impact an entire Availability Zone
		• Designed for 99.9% availability over a given year
		
	• Amazon Glacier
		• Low cost object storage meant for archiving / backup
		• Data is retained for the longer term (10s of years)
		• Alternative to on-premise magnetic tape storage
		• Average annual durability is 99.999999999%
		• Cost per storage per month ($0.004 / GB) + retrieval cost
		• Each item in Glacier is called “Archive” (up to 40TB)
		• Archives are stored in ”Vaults”
		
	• Amazon Glacier Deep Archive
		• Amazon Glacier – 3 retrieval options:
			• Expedited (1 to 5 minutes)
			• Standard (3 to 5 hours)
			• Bulk (5 to 12 hours)
			• Minimum storage duration of 90 days
		• Amazon Glacier Deep Archive – for long term storage – cheaper:
			• Standard (12 hours)
			• Bulk (48 hours)
			• Minimum storage duration of 180 days
			
	• Amazon S3 Reduced Redundancy Storage (deprecated - omitted)
	
22.	S3 – Moving between storage classes
	• You can transition objects between storage classes
	• For infrequently accessed object, move them to STANDARD_IA
	• For archive objects you don’t need in real-time, GLACIER or DEEP_ARCHIVE
	• Moving objects can be automated using a lifecycle configuration
	
23.	S3 Lifecycle Rules
	• Transition actions: It defines when objects are transitioned to another storage class.
		• Move objects to Standard IA class 60 days after creation
		• Move to Glacier for archiving after 6 months
	• Expiration actions: configure objects to expire (delete) after some time
		• Access log files can be set to delete after a 365 days
		• Can be used to delete old versions of files (if versioning is enabled)
		• Can be used to delete incomplete multi-part uploads
	• Rules can be created for a certain prefix (ex - s3://mybucket/mp3/*)
	• Rules can be created for certain objects tags (ex - Department: Finance)
	
24.	S3 Lifecycle Rules – Scenario 1
	• Your application on EC2 creates images thumbnails after profile photos are uploaded to Amazon S3. These thumbnails can be easily recreated, and only need to be kept for 45 days. The source images should be able to be immediately retrieved for these 45 days, and afterwards, the user can wait up to 6 hours. How would you design this?
	• S3 source images can be on STANDARD, with a lifecycle configuration to transition them to GLACIER after 45 days.
	• S3 thumbnails can be on ONEZONE_IA, with a lifecycle configuration to expire them (delete them) after 45 days.
	
25.	S3 Lifecycle Rules – Scenario 2
	• A rule in your company states that you should be able to recover your deleted S3 objects immediately for 15 days, although this may happen rarely. After this time, and for up to 365 days, deleted objects should be recoverable within 48 hours.
	• You need to enable S3 versioning in order to have object versions, so that “deleted objects” are in fact hidden by a “delete marker” and can be recovered
	• You can transition these “noncurrent versions” of the object to S3_IA
	• You can transition afterwards these “noncurrent versions” to DEEP_ARCHIVE
	
26.	S3 – Baseline Performance
	• Amazon S3 automatically scales to high request rates, latency 100-200 ms
	• Your application can achieve at least 3,500 PUT/COPY/POST/DELETE and 5,500 GET/HEAD requests per second per prefix in a bucket.
	• There are no limits to the number of prefixes in a bucket.
	• Example (object path => prefix):
		• bucket/folder1/sub1/file => /folder1/sub1/
		• bucket/folder1/sub2/file => /folder1/sub2/
		• bucket/1/file => /1/
		• bucket/2/file => /2/
	• If you spread reads across all four prefixes evenly, you can achieve 22,000 requests per second for GET and HEAD
	
27.	S3 – KMS Limitation
	• If you use SSE-KMS, you may be impacted by the KMS limits
	• When you upload, it calls the GenerateDataKey KMS API
	• When you download, it calls the Decrypt KMS API
	• Count towards the KMS quota per second (5500, 10000, 30000 req/s based on region)
	• As of today, you cannot request a quota increase for KMS
	
28.	S3 Performance
	• Multi-Part upload:
		• recommended for files > 100MB, must use for files > 5GB
		• Can help parallelize uploads (speed up transfers)
	• S3 Transfer Acceleration (upload only)
		• Increase transfer speed by transferring file to an AWS edge location which will forward the data to the S3 bucket in the target region
		• Compatible with multi-part upload
		
29.	S3 Performance – S3 Byte-Range Fetches
	• Parallelize GETs by requesting specific byte ranges
	• Better resilience in case of failures
	
30.	S3 Select & Glacier Select
	• Retrieve less data using SQL by performing server side filtering
	• Can filter by rows & columns (simple SQL statements)
	• Less network transfer, less CPU cost client-side
	
31.	S3 Event Notifications
	• S3:ObjectCreated, S3:ObjectRemoved, S3:ObjectRestore, S3:Replication…
	• Object name filtering possible (*.jpg)
	• Use case: generate thumbnails of images uploaded to S3
	• Can create as many “S3 events” as desired
	• S3 event notifications typically deliver events in seconds but can sometimes take a minute or longer
	• If two writes are made to a single non-versioned object at the same time, it is possible that only a single event notification will be sent
	• If you want to ensure that an event notification is sent for every successful write, you can enable versioning on your bucket.
	
32.	S3 Object Lock & Glacier Vault Lock
	• S3 Object Lock
		• Adopt a WORM (Write Once Read Many) model
		• Block an object version deletion for a specified amount of time
	• Glacier Vault Lock
		• Adopt a WORM (Write Once Read Many) model
		• Lock the policy for future edits (can no longer be changed)
		• Helpful for compliance and data retention
		
33.	