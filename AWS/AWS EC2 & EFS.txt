1.	EC2 stands for Elastic Cloud Compute and capable for:
	-provide virtual machine(EC2)
	-storing adata on virtual drives(EBS)Elastic Block Store
	-Distributing load across machines(ELB)Elastic Load Balancing
	-Scaling the services using auto scaling group (ASG)
	
2.	Steps to launch EC2 instance:
	-choose you required type AMI(Amazon machine image) example linux 2, it decides what type of machine(OS) you want to use
	-choose the instance type, it gives to vaiorus option to use no. cpu, memory, letworking capacity as per your requirement.
	-configure instance details, you can configure different settings for that instance like ip,subnet, no. of instance etc.
	-add storage, you can add the amount of storage you want to use.
	-add tags, you can add key value pairs to assign naming to your instance.
	-configure security groups, it is used to set firewall rules for your instance.
	-review and launch, after clicking on launch you have to select a key value pair and download for future reference to access
		EC2.
		
3.	We need SSH for using EC2
	-SSH or Secure Shell is a network communication protocol that enables two computers to communicate.
	-SSH is often used to "login" and perform operations on remote computers but it may also be used for transferring data.
	-it helps specially when you are communicating through unsecure network as communication is encrypted.
	
4.	steps to use ssh to access EC2
	-place your key(pem file)that you have downloaded for that EC2 instance in secure directory
	-open cmd in that directory
	-use this command to connect to remote machine 
		-ssh -i <yourkeyname.pem> ec2-user@<ec2 instance public ip>
		-eg: ssh -i xyz.pem ec2-user@13.233.115.187
	-you might get warning saying unprotected  private key file(permission 0644 for your key is open) that means it can be accesible buy anyone if key got leaked.
	-to fix this warning/error use this command
		-chmod 0400 <yourkeyname.pem>(not present in windows 10)
		-you need havev right user with all permission in windows to to resolve the same error
		
	-if you have windows version less than 10 you might need putty to access ssh as its not directly supported.
	-putty is a ssh client
	-steps to do ssh using putty
		-open puttyGen
		-we need to convert pem key into ppk(putty private key) format for putty
		-load your pem file here and click on save privae key
		-open putty enter host name as ec2-user@<ec2 instance public ip>
		-go to ssh->auth and browse our ppk key there.
		-save your session with any name and open
		-command line will open with remote access
		
	-if you dont want to these steps you can use EC2 Connect to have same thing
		-in ec2 dashboard goto connect tab
		-select EC2 instance connect and use ec2-user as user and click on connect
		
5.	Security group in EC2:
	-Security Groups are the fundamental of network security in AWS
	-They control how traffic is allowed into or out of our EC2 Machines.
	-for inbound(incoming) traffic if you remove all inbound rules then you will ended up with timeout on ssh command means you cant connect to your remote machine anymore.
	-you can add ay rules like rule type(all,only ssh,only http,only LDAP etc), Protocol(all,tcp etc), portrange(0-65535),
	destination(custom,anywhere or your personal ip only) and description to define that rule.
	-It Regulates:
		-Access to Ports
		-Authorised IP ranges – IPv4 and IPv6
		-Control of inbound network (from other to the instance)
		-Control of outbound network (from the instance to other)
		
	-Security group Can be attached to multiple instances
	-specific to a region / VPC combination
	-Does live “outside” the EC2 – if traffic is blocked the EC2 instance won’t see it.
	-It’s good to maintain one separate security group for SSH access
	-If your application is not accessible (time out), then it’s a security group issue
	-If your application gives a “connection refused“ error, then it’s an application error or it’s not launched
	-All inbound traffic is blocked by default
	-All outbound traffic is authorised by default
	-during load balancer you can allow another security group to access your EC2 with permissions granted to that security group.
	
6.	Private vs Public IP (IPv4) Fundamental Differences
	• Public IP:
		• Public IP means the machine can be identified on the internet (WWW)
		• Must be unique across the whole web (not two machines can have the same public IP).
		• Can be geo-located easily
	• Private IP:
		• Private IP means the machine can only be identified on a private network only
		• The IP must be unique across the private network
		• BUT two different private networks (two companies) can have the same IPs.
		• Machines connect to WWW using a NAT + internet gateway (a proxy)
		• Only a specified range of IPs can be used as private IP
	
7.	Elastic IPs:	(helps you configure static ip even on stop/start)
	• When you stop and then start an EC2 instance, it can change its public IP.
	• If you need to have a fixed public IP for your instance, you need an Elastic IP
	• An Elastic IP is a public IPv4 IP you own as long as you don’t delete it
	• You can attach it to one instance at a time
	• With an Elastic IP address, you can mask the failure of an instance or software by rapidly remapping the address to    another instance in your account.
	• You can only have 5 Elastic IP in your account (you can ask AWS to increase that).
	• Overall, try to avoid using Elastic IP:
	• They often reflect poor architectural decisions
	• Instead, use a random public IP and register a DNS name to it
	• Or, as we’ll see later, use a Load Balancer and don’t use a public IP
	• By default, your EC2 machine comes with:
		• A private IP for the internal AWS Network
		• A public IP, for the WWW.
	• When we are doing SSH into our EC2 machines:
		• We can’t use a private IP, because we are not in the same network
		• We can only use the public IP.
	• If your machine is stopped and then started, the public IP can change
	
8.	to update your machine that you are using on EC2(linux 2 in our case)
	-sudu su    (to switch user to root user to access all commands)
	-yum update -y    (-y to promote without asking permission)
			
9.	to install apacher server in ec2 instance
	-httpd is the Apache HyperText Transfer Protocol (HTTP) server program. It is designed to be run as a standalone daemon process.
	-command to install apache server on linux machine
		-yum install -y httpd.x86_64
	-command to enable apache services
		-systemctl enable httpd.service
	-command to start apache services
		-systemctl start httpd.service
	-command to check server page
		-curl localhost:80
	-add security group for apache i.e http with port 80 and use browser to check server page status
		-http://13.232.170.117:80
	-to print hello world to this server
		-echo "hello world" > var/www/html/index.html
		
10.	EC2 User Data:
	• It is possible to bootstrap our instances using an EC2 User data script.
	• bootstrapping means launching commands when a machine starts
	• That script is only run once at the instance first start
	• EC2 user data is used to automate boot tasks such as:
		• Installing updates
		• Installing software
		• Downloading common files from the internet
		• Anything you can think of
	• The EC2 User Data Script runs with the root user
	
	-to automate process on bootup of instance
		-under configuration advance tab under user data
			-#!/bin/bash
			 yum update -y
			 yum install -y httpd.x86_64
			 systemctl start httpd.service
			 systemctl enable httpd.service
			 echo "Hello World from $(hostname -f)" > /var/www/html/index.html
	-once you place this and run your instance, everytime your instance launched this bootstrap script will run.
	
11.	EC2 Instance Launch Types
	• On Demand Instances: short workload, predictable pricing
		• Pay for what you use (billing per second, after the first minute)
		• Has the highest cost but no upfront payment
		• No long term commitment
		• Recommended for short-term and un-interrupted workloads, where you can't predict how the application will behave.
		
	• Reserved: (MINIMUM 1 year)
		• Up to 75% discount compared to On-demand
		• Pay upfront for what you use with long term commitment
		• Reservation period can be 1 or 3 years
		• Reserve a specific instance type
		• Recommended for steady state usage applications (think database)
			• Reserved Instances: long workloads
			• Convertible Reserved Instances: long workloads with flexible instances
				• can change the EC2 instance type
				• Up to 54% discount
			• Scheduled Reserved Instances: example – every Thursday between 3 and 6 pm
				• launch within time window you reserve
				• When you require a fraction of day / week / month
				
	• Spot Instances: short workloads, for cheap, can lose instances (less reliable)
		• Can get a discount of up to 90% compared to On-demand
		• Instances that you can “lose” at any point of time if your max price is less than the current spot price
		• The MOST cost-efficient instances in AWS
		• Useful for workloads that are resilient to failure
			• Batch jobs
			• Data analysis
			• Image processing
		• Not great for critical jobs or databases
		• Great combo: Reserved Instances for baseline + On-Demand & Spot for peaks
		
	• Dedicated Instances: no other customers will share your hardware
		• Physical dedicated EC2 server for your use
		• Full control of EC2 Instance placement
		• Visibility into the underlying sockets / physical cores of the hardware
		• Allocated for your account for a 3 year period reservation
		• More expensive
		• Useful for software that have complicated licensing model (BYOL – Bring Your Own License)
		• Or for companies that have strong regulatory or compliance needs
		
	• Dedicated Hosts: book an entire physical server, control instance placement
		• Instances running on hardware that’s dedicated to you
		• May share hardware with other instances in same account
		• No control over instance placement (can move hardware after Stop / Start)
	
12.	Which host is right for me?Hotel example
	• On demand: coming and staying in resort whenever we like, we pay the full price
	• Reserved: like planning ahead and if we plan to stay for a long time, we may get a good discount.
	• Spot instances: the hotel allows people to bid for the empty rooms and the highest bidder keeps the rooms. You can get kicked out at any time
	• Dedicated Hosts: We book an entire building of the resort
	
13.	Elastic Network Interfaces (ENI)
	• Logical component in a VPC that represents a virtual network card
	• The ENI can have the following attributes:
		• Primary private IPv4, one or more secondary IPv4
		• One Elastic IP (IPv4) per private IPv4
		• One Public IPv4
		• One or more security groups
		• A MAC address
	• You can create ENI independently and attach them on the fly (move them) on EC2 instances for failover
	• Bound to a specific availability zone (AZ)
	
14.	EC2 Pricing
	• EC2 instances prices (per hour) varies based on these parameters:
		• Region you’re in
		• Instance Type you’re using
		• On-Demand vs Spot vs Reserved vs Dedicated Host
		• Linux vs Windows vs Private OS (RHEL, SLES, Windows SQL)
	• You are billed by the second, with a minimum of 60 seconds.
	• You also pay for other factors such as storage, data transfer, fixed IP public addresses, load balancing
	• You do not pay for the instance if the instance is stopped
	
15.	What’s an AMI(Amazon Machine Image)?
	• AWS comes with base images such as:
		• Ubuntu
		• Fedora
		• RedHat
		• Windows
		• Etc…
	• These images can be customised at runtime using EC2 User data
	• Using a custom built AMI can provide the following advantages:
		• Pre-installed packages needed
		• Faster boot time (no need for long ec2 user data at boot time)
		• Machine comes configured with monitoring / enterprise software
		• Security concerns – control over the machines in the network
		• Control of maintenance and updates of AMIs over time
		• Active Directory Integration out of the box
		• Installing your app ahead of time (for faster deploys when auto-scaling)
		• Using someone else’s AMI that is optimised for running an app, DB, etc…
	• That’s an AMI – an image to use to create our instances
	• AMIs can be built for Linux or Windows machines
	• AMI are built for a specific AWS region (!)
	
16.	EC2 Instances Overview
	• Instances have 5 distinct characteristics advertised on the website:
		• The RAM (type, amount, generation)
		• The CPU (type, make, frequency, generation, number of cores)
		• The I/O (disk performance, EBS optimisations)
		• The Network (network bandwidth, network latency)
		• The Graphical Processing Unit (GPU)
	• It may be daunting to choose the right instance type (there are over 50 of them) -
	https://aws.amazon.com/ec2/instance-types/
	• https://ec2instances.info/ can help with summarizing the types of instances
	• R/C/P/G/H/X/I/F/Z/CR are specialised in RAM, CPU, I/O, Network, GPU
	• M instance types are balanced
	• T2/T3 instance types are “burstable”
	
17.	Burstable Instances (T2)
		• AWS has the concept of burstable instances (T2 machines)
		• Burst means that overall, the instance has OK CPU performance.
		• When the machine needs to process something unexpected (a spike in load for example), it can burst, and CPU can be VERY good.
		• If the machine bursts, it utilizes “burst credits”
		• If all the credits are gone, the CPU becomes BAD
		• If the machine stops bursting, credits are accumulated over time
		• Burstable instances can be amazing to handle unexpected traffic and getting the insurance that it will be handled correctly
		• If your instance consistently runs low on credit, you need to move to a different kind of non-burstable instance (all the ones described before).
	
18.	EC2 – Checklist
		• Know how to SSH into EC2 (and change .pem file permissions)
		• Know how to properly use security groups
		• Know the fundamental differences between private vs public vs elastic IP
		• Know how to use User Data to customize your instance at boot time
		• Know that you can build custom AMI to enhance your OS
		• EC2 instances are billed by the second and can be easily created and thrown away, welcome to the cloud!

-->ELB(Elastic Load Balancer) and ASG(Auto Scaling Group)

19.	Scalability & High Availability
	• Scalability means that an application / system can handle greater loads by adapting.
	• There are two kinds of scalability:
		• Vertical Scalability
			• Vertically scalability means increasing the size of the instance
			• For example, your application runs on a t2.micro
			• Scaling that application vertically means running it on a t2.large
			• Vertical scalability is very common for non distributed systems, such as a database.
			• RDS, ElastiCache are services that can scale vertically.
			• There’s usually a limit to how much you can vertically scale (hardware limit)
		• Horizontal Scalability (= elasticity)
			• Horizontal Scalability means increasing the number of instances / systems for your application
			• Horizontal scaling implies distributed systems.
			• This is very common for web applications / modern applications
			• It’s easy to horizontally scale thanks the cloud offerings such as Amazon EC2
	• Scalability is linked but different to High Availability
	• High Availability usually goes hand in hand with horizontal scaling
	• High availability means running your application / system in at least 2 data centers (== Availability Zones)
	• The goal of high availability is to survive a data center loss
	• The high availability can be passive (for RDS Multi AZ for example)
	• The high availability can be active (for horizontal scaling)
	
20.	Why use a load balancer?
		• Spread load across multiple downstream instances
		• Expose a single point of access (DNS) to your application
		• Seamlessly handle failures of downstream instances
		• Do regular health checks to your instances
		• Provide SSL termination (HTTPS) for your websites
		• Enforce stickiness with cookies
		• High availability across zones
		• Separate public traffic from private traffic
		
21.	Types of load balancer on AWS
		• AWS has 3 kinds of managed Load Balancers
		• Classic Load Balancer (v1 - old generation) – 2009
			• supports HTTP, HTTPS, TCP
		• Application Load Balancer (v2 - new generation) – 2016
			• supports HTTP, HTTPS, WebSocket
		• Network Load Balancer (v2 - new generation) – 2017
			• supports TCP, TLS (secure TCP) & UDP
		• Overall, it is recommended to use the newer / v2 generation load balancers as they provide more features
		• You can setup internal (private) or external (public) ELBs
		
22.	Classic Load Balancers (v1)
		• Supports TCP (Layer 4), HTTP & HTTPS (Layer 7)
		• Health checks are TCP or HTTP based
		• Fixed hostname  eg. XXX.region.elb.amazonaws.com
		• suitable with mostly old monolyth type applications
	
23.	Application Load Balancer (v2)
		• Application load balancers is Layer 7 (HTTP)
		• Load balancing to multiple HTTP applications across machines (target groups)
		• Load balancing to multiple applications on the same machine (ex: containers)
		• Support for HTTP/2 and WebSocket
		• Support redirects (from HTTP to HTTPS for example)
		• Routing tables to different target groups:
			• Routing based on path in URL (example.com/users & example.com/posts)
			• Routing based on hostname in URL (one.example.com & other.example.com)
			• Routing based on Query String, Headers (example.com/users?id=123&order=false)
		• ALB are a great fit for micro services & container-based application (example: Docker & Amazon ECS)
		• Has a port mapping feature to redirect to a dynamic port in ECS
		• In comparison, we’d need multiple Classic Load Balancer per application
	
24.	Network Load Balancer (v2)
		• Network load balancers (Layer 4) allow to:
			• Forward TCP & UDP traffic to your instances
			• Handle millions of request per seconds
			• Less latency ~100 ms (vs 400 ms for ALB)
		• NLB has one static IP per AZ, and supports assigning Elastic IP (helpful for whitelisting specific IP)
		• NLB are used for extreme performance, TCP or UDP traffic
	
25.	Load Balancer Stickiness
		• It is possible to implement stickiness so that the same client is always redirected to the same instance behind a load balancer
		• This works for Classic Load Balancers & Application Load Balancers
		• The “cookie” used for stickiness has an expiration date you control
		• Use case: make sure the user doesn’t lose  his session data
		• Enabling stickiness may bring imbalance to the load over the backend EC2 instances
		
26.	Cross-Zone Load Balancing
		• With Cross Zone Load Balancing: each load balancer instance distributes evenly across all registered instances in all AZ(availability zone)
		• Otherwise, each load balancer node distributes requests evenly across the registered instances in its Availability Zone only.
		
27.	Cross-Zone Load Balancing
		• Classic Load Balancer
			• Disabled by default
			• No charges for inter AZ data if enabled
		• Application Load Balancer
			• Always on (can’t be disabled)
			• No charges for inter AZ data
		• Network Load Balancer
			• Disabled by default
			• You pay charges ($) for inter AZ data if enabled
		
28.	SSL/TLS - Basics
		• An SSL Certificate allows traffic between your clients and your load balancer to be encrypted in transit (in-flight encryption)
		• SSL refers to Secure Sockets Layer, used to encrypt connections
		• TLS refers to Transport Layer Security, which is a newer version
		• Nowadays, TLS certificates are mainly used, but people still refer it as SSL
		• Public SSL certificates are issued by Certificate Authorities (CA)
		• Comodo, Symantec, GoDaddy, GlobalSign, Digicert, Letsencrypt, etc…
		• SSL certificates have an expiration date (you set) and must be renewed
	
29.	SNI – Server Name Indication (SNI)
		• SNI solves the problem of loading multiple SSL certificates onto one web server (to serve multiple websites)
		• It’s a “newer” protocol, and requires the client to indicate the hostname of the target server in the initial SSL handshake
		• The server will then find the correct certificate, or return the default one
		Note:
		• Only works for ALB & NLB (newer generation), CloudFront
		• Does not work for CLB (older gen)
	
30.	Elastic Load Balancers – SSL Certificates
		• Classic Load Balancer (v1)
			• Support only one SSL certificate
			• Must use multiple CLB for multiple hostname with multiple SSL certificates
		• Application Load Balancer (v2)
			• Supports multiple listeners with multiple SSL certificates
			• Uses Server Name Indication (SNI) to make it work
		• Network Load Balancer (v2)
			• Supports multiple listeners with multiple SSL certificates
			• Uses Server Name Indication (SNI) to make it work
		
31.	ELB – Connection Draining
		• Feature naming:
			• CLB: Connection Draining
			• Target Group: Deregistration Delay (for ALB & NLB)
		• Time to complete “in-flight requests” while the instance is de-registering or unhealthy
		• Stops sending new requests to the instance which is de-registering
		• Between 1 to 3600 seconds, default is 300 seconds
		• Can be disabled (set value to 0)
		• Set to a low value if your requests are short
	
32.	What’s an Auto Scaling Group?
		• In real-life, the load on your websites and application can change
		• In the cloud, you can create and get rid of servers very quickly
		• The goal of an Auto Scaling Group (ASG) is to:
			• Scale out (add EC2 instances) to match an increased load
			• Scale in (remove EC2 instances) to match a decreased load
			• Ensure we have a minimum and a maximum number of machines running
			• Automatically Register new instances to a load balancer
			
33.	ASG Brain Dump
		• Scaling policies can be on CPU, Network… and can even be on custom metrics or based on a schedule (if you know your visitors patterns)
		• ASGs use Launch configurations or Launch Templates (newer)
		• To update an ASG, you must provide a new launch configuration / launch template
		• IAM roles attached to an ASG will get assigned to EC2 instances
		• ASG are free. You pay for the underlying resources being launched
		• Having instances under an ASG means that if they get terminated for whatever reason, the ASG will automatically create new ones as a replacement. Extra safety!
		• ASG can terminate instances marked as unhealthy by an LB (and hence replace them)
		
34.	Auto Scaling Groups – Scaling Policies
		• Target Tracking Scaling
			• Most simple and easy to set-up
			• Example: I want the average ASG CPU to stay at around 40%
		• Simple / Step Scaling
			• When a CloudWatch alarm is triggered (example CPU > 70%), then add 2 units
			• When a CloudWatch alarm is triggered (example CPU < 30%), then remove 1
		• Scheduled Actions
			• Anticipate a scaling based on known usage patterns
			• Example: increase the min capacity to 10 at 5 pm on Friday
			
		• The cooldown period helps to ensure that your Auto Scaling group doesn't launch or terminate additional instances before the previous scaling activity takes effect.
		• In addition to default cooldown for Auto Scaling group, we can create cooldowns that apply to a specific simple scaling policy
		• A scaling-specific cooldown period overrides the default cooldown period.
		• One common use for scaling-specific cooldowns is with a scale-in policy—a policy that terminates instances based on a specific criteria or metric. Because this policy terminates instances, Amazon EC2 Auto Scaling needs less time to determine whether to terminate additional instances.
		• If the default cooldown period of 300 seconds is too long—you can reduce costs by applying a scaling-specific cooldown period of 180 seconds to the scale-in policy.
		• If your application is scaling up and down multiple times each hour, modify the Auto Scaling Groups cool-down timers and the CloudWatch Alarm Period that triggers the scale in

-->EC2 Storage - EBS

35.	What’s an EBS Volume?
		• An EC2 machine loses its root volume (main drive) when it is manually terminated.
		• Unexpected terminations might happen from time to time (AWS would email you)
		• Sometimes, you need a way to store your instance data somewhere
		• An EBS (Elastic Block Store) Volume is a network drive you can attach to your instances while they run
		• It allows your instances to persist data
		• It’s a network drive (i.e. not a physical drive)
			• It uses the network to communicate the instance, which means there might be a bit of latency
			• It can be detached from an EC2 instance and attached to another one quickly
		• It’s locked to an Availability Zone (AZ)
			• An EBS Volume in us-east-1a cannot be attached to us-east-1b
			• To move a volume across, you first need to snapshot it
		• Have a provisioned capacity (size in GBs, and IOPS)
			• You get billed for all the provisioned capacity
			• You can increase the capacity of the drive over time
			
36.	EBS Volume Types
		• EBS Volumes come in 4 types
			• GP2 (SSD): General purpose SSD volume that balances price and performance for a
			wide variety of workloads
			• IO1 (SSD): Highest-performance SSD volume for mission-critical low-latency or highthroughput
			workloads
			• ST1 (HDD): Low cost HDD volume designed for frequently accessed, throughputintensive
			workloads
			• SC1 (HDD): Lowest cost HDD volume designed for less frequently accessed workloads
		• EBS Volumes are characterized in Size | Throughput | IOPS (I/O Ops Per Sec)
		• Only GP2 and IO1 can be used as boot volumes
		
37.	EBS Volume Types Use cases
		GP2 (from AWS doc)
			• Recommended for most workloads
			• System boot volumes
			• Virtual desktops
			• Low-latency interactive apps
			• Development and test environments
			• 1 GiB - 16 TiB
			• Small gp2 volumes can burst IOPS to 3000
			• Max IOPS is 16,000…
			• 3 IOPS per GB, means at 5,334GB we are at the max IOPS
		
		IO1 (from AWS doc)
			• Critical business applications that require sustained IOPS performance, or more than 16,000 IOPS per volume (gp2 limit)
			• Large database workloads, such as:
			• MongoDB, Cassandra, Microsoft SQL Server, MySQL, PostgreSQL, Oracle
			• 4 GiB - 16 TiB
			• IOPS is provisioned (PIOPS) – MIN 100 - MAX 64,000 (Nitro instances) else MAX 32,000 (other instances)
			• The maximum ratio of provisioned IOPS to requested volume size (in GiB) is 50:1
			
		ST1 (from AWS doc)
			• Streaming workloads requiring consistent, fast throughput at a low price.
			• Big data, Data warehouses, Log processing
			• Apache Kafka
			• Cannot be a boot volume
			• 500 GiB - 16 TiB
			• Max IOPS is 500
			• Max throughput of 500 MiB/s – can burst
			
		SC1 (from AWS doc)
			• Throughput-oriented storage for large volumes of data that is infrequently accessed
			• Scenarios where the lowest storage cost is important
			• Cannot be a boot volume
			• 500 GiB - 16 TiB
			• Max IOPS is 250
			• Max throughput of 250 MiB/s – can burst
			
38.	EBS vs Instance Store
		• Some instance do not come with Root EBS volumes
		• Instead, they come with “Instance Store” (= ephemeral storage)
		• Instance store is physically attached to the machine (EBS is a network drive)
		• Pros:
			• Better I/O performance (EBS gp2 has an max IOPS of 16000, io1 of 64000)
			• Good for buffer / cache / scratch data / temporary content
			• Data survives reboots
		• Cons:
			• On stop or termination, the instance store is lost
			• You can’t resize the instance store
			• Backups must be operated by the user
	Local EC2 Instance Store
		• Physical disk attached to the physical server where your EC2 is
		• Very High IOPS (because physical)
		• Disks up to 7.5 TiB (can change over time), stripped to reach 30 TiB (can change over time…)
		• Block Storage (just like EBS)
		• Cannot be increased in size
		• Risk of data loss if hardware fails
	
-->EFS	
39.	EFS – Elastic File System
		• Managed NFS (network file system) that can be mounted on many EC2
		• EFS works with EC2 instances in multi-AZ
		• Highly available, scalable, expensive (3x gp2), pay per use
		• Use cases: content management, web serving, data sharing, Wordpress
		• Uses NFSv4.1 protocol
		• Uses security group to control access to EFS
		• Compatible with Linux based AMI (not Windows)
		• Encryption at rest using KMS
		• POSIX file system (~Linux) that has a standard file API
		• File system scales automatically, pay-per-use, no capacity planning!
		
40.	EFS – Performance & Storage Classes
		• EFS Scale
			• 1000s of concurrent NFS clients, 10 GB+ /s throughput
			• Grow to Petabyte-scale network file system, automatically
		• Performance mode (set at EFS creation time)
			• General purpose (default): latency-sensitive use cases (web server, CMS, etc…)
			• Max I/O – higher latency, throughput, highly parallel (big data, media processing)
		• Storage Tiers (lifecycle management feature – move file after N days)
			• Standard: for frequently accessed files
			• Infrequent access (EFS-IA): cost to retrieve files, lower price to store
			
41.	EBS vs EFS – Elastic Block Storage
		• EBS volumes…
			• can be attached to only one instance at a time
			• are locked at the Availability Zone (AZ) level
			• gp2: IO increases if the disk size increases
			• io1: can increase IO independently
		• To migrate an EBS volume across AZ
			• Take a snapshot
			• Restore the snapshot to another AZ
			• EBS backups use IO and you shouldn’t run them while your application is handling a lot of traffic
		• Root EBS Volumes of instances get terminated by default if the EC2 instance gets terminated. (you can disable that)
		
	EBS vs EFS – Elastic File System
		• Mounting 100s of instances across AZ
		• EFS share website files (WordPress)
		• Only for Linux Instances (POSIX)
		• EFS has a higher price point than EBS
		• Can leverage EFS-IA for cost savings
		• Remember: EFS vs EBS vs Instance Store
	